
class CarsView(View):

    def get(self, request):
        cars = Car.objects.all().order_by('model')
        search = request.GET.get('search') #pega os dados do usuário através do parâmetro 'search' e armazena na variável.
        if search: # verifica se o usuário fez alguma busca
            cars = cars.filter(model_icontains=search).order_by('model')#pucha os objetos do banco de dados através do metódo 'filter' e trazendo tudo que contain.

        for car in cars:
            car.fomatted_value = format_currency(car.value, 'BRL', locale='pt_BR')
            
        return render(
            request,
            'cars.html',
            {'cars': cars}# caso o usuário não tenha feito nenhuma busca o programa vai trazer todos os carros.
        )

    

class CarsListView(ListView):

    def get(self, request):
        model = Car # model que esta-rá sendo usado
        template_name = 'cars.html' # Faz a mesma função que o render, só precisa informar qual o template que será renderizado
        context_object_name = 'cars'

class NewCarCreateView(CreateView):
    model = Car # Informar qual o model
    form_class = CarModelForm # De qual form virá os dados 
    template_name = 'new_car.html' # em qual template está localizado esse formulário
    success_url = '/cars/' # para qual URL será direcionado após o cadastro ter êxito
    

class CarDetailView(DetailView):
    model = Car
    template_name = 'car_detail.html'


class CarUpdateView(UpdateView):
    model = Car  #usa o model form
    form_class = CarModelForm # Pega o formulário de cadastros de produtos
    template_name = 'car_update.html' # Insere modelForm no html
    success_url = '/cars/' # se tiver sucesso redireciona para a página cars

    def get_success_url(self): # Reescrevendo uma função do Django para conseguir redirecionar o usuário para uma url personalizada após fazer um Update
        return reverse_lazy('car_detail', kwargs={'pk': self.object.pk})
        """
        O metódo reverse_lazy server para redirecionar o usuário após um evento
        nesse caso a função está redirecionando para a url=car_detail e pegando 
        a primary key do item alterado evitando que após realizar a edição do item
        o usuário não sejá redirecionado para a lista de carros da tela principal, 
        más sim para o template do mesmo item que foi alterado.
        Mais sobre reverse_lazy: https://docs.djangoproject.com/en/5.0/ref/urlresolvers/
        """

class CarDeleteView(DeleteView):
    model = Car
    template_name = 'car_delete.html'
    success_url = '/cars/'